// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/shmemr.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// mem_types
Rcpp::StringVector mem_types();
static SEXP _shmemr_mem_types_try() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    rcpp_result_gen = Rcpp::wrap(mem_types());
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _shmemr_mem_types() {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_shmemr_mem_types_try());
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// mem_init
Rcpp::List mem_init(std::string name, double length, std::string type);
static SEXP _shmemr_mem_init_try(SEXP nameSEXP, SEXP lengthSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    Rcpp::traits::input_parameter< double >::type length(lengthSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(mem_init(name, length, type));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _shmemr_mem_init(SEXP nameSEXP, SEXP lengthSEXP, SEXP typeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_shmemr_mem_init_try(nameSEXP, lengthSEXP, typeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// mem_release
void mem_release(SEXP x);
static SEXP _shmemr_mem_release_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    mem_release(x);
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _shmemr_mem_release(SEXP xSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_shmemr_mem_release_try(xSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// mem_attach
void mem_attach(SEXP x);
static SEXP _shmemr_mem_attach_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    mem_attach(x);
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _shmemr_mem_attach(SEXP xSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_shmemr_mem_attach_try(xSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// mem_detach
void mem_detach(SEXP x);
static SEXP _shmemr_mem_detach_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    mem_detach(x);
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _shmemr_mem_detach(SEXP xSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_shmemr_mem_detach_try(xSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// is_mem_attached
bool is_mem_attached(SEXP x);
static SEXP _shmemr_is_mem_attached_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(is_mem_attached(x));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _shmemr_is_mem_attached(SEXP xSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_shmemr_is_mem_attached_try(xSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// get_mem_ptr
SEXP get_mem_ptr(SEXP x);
static SEXP _shmemr_get_mem_ptr_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(get_mem_ptr(x));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _shmemr_get_mem_ptr(SEXP xSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_shmemr_get_mem_ptr_try(xSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// get_mem_str
std::string get_mem_str(SEXP x);
static SEXP _shmemr_get_mem_str_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(get_mem_str(x));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _shmemr_get_mem_str(SEXP xSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_shmemr_get_mem_str_try(xSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// get_mem_length
double get_mem_length(SEXP x);
static SEXP _shmemr_get_mem_length_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(get_mem_length(x));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _shmemr_get_mem_length(SEXP xSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_shmemr_get_mem_length_try(xSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// get_mem_id
std::string get_mem_id(SEXP x);
static SEXP _shmemr_get_mem_id_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(get_mem_id(x));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _shmemr_get_mem_id(SEXP xSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_shmemr_get_mem_id_try(xSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// mem_remove
void mem_remove(SEXP x);
static SEXP _shmemr_mem_remove_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    mem_remove(x);
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _shmemr_mem_remove(SEXP xSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_shmemr_mem_remove_try(xSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// mem_resize
void mem_resize(SEXP x, double new_length);
static SEXP _shmemr_mem_resize_try(SEXP xSEXP, SEXP new_lengthSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type new_length(new_lengthSEXP);
    mem_resize(x, new_length);
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _shmemr_mem_resize(SEXP xSEXP, SEXP new_lengthSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_shmemr_mem_resize_try(xSEXP, new_lengthSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _shmemr_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("Rcpp::StringVector(*mem_types)()");
        signatures.insert("Rcpp::List(*mem_init)(std::string,double,std::string)");
        signatures.insert("void(*mem_release)(SEXP)");
        signatures.insert("void(*mem_attach)(SEXP)");
        signatures.insert("void(*mem_detach)(SEXP)");
        signatures.insert("bool(*is_mem_attached)(SEXP)");
        signatures.insert("SEXP(*get_mem_ptr)(SEXP)");
        signatures.insert("std::string(*get_mem_str)(SEXP)");
        signatures.insert("double(*get_mem_length)(SEXP)");
        signatures.insert("std::string(*get_mem_id)(SEXP)");
        signatures.insert("void(*mem_remove)(SEXP)");
        signatures.insert("void(*mem_resize)(SEXP,double)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _shmemr_RcppExport_registerCCallable() { 
    R_RegisterCCallable("shmemr", "_shmemr_mem_types", (DL_FUNC)_shmemr_mem_types_try);
    R_RegisterCCallable("shmemr", "_shmemr_mem_init", (DL_FUNC)_shmemr_mem_init_try);
    R_RegisterCCallable("shmemr", "_shmemr_mem_release", (DL_FUNC)_shmemr_mem_release_try);
    R_RegisterCCallable("shmemr", "_shmemr_mem_attach", (DL_FUNC)_shmemr_mem_attach_try);
    R_RegisterCCallable("shmemr", "_shmemr_mem_detach", (DL_FUNC)_shmemr_mem_detach_try);
    R_RegisterCCallable("shmemr", "_shmemr_is_mem_attached", (DL_FUNC)_shmemr_is_mem_attached_try);
    R_RegisterCCallable("shmemr", "_shmemr_get_mem_ptr", (DL_FUNC)_shmemr_get_mem_ptr_try);
    R_RegisterCCallable("shmemr", "_shmemr_get_mem_str", (DL_FUNC)_shmemr_get_mem_str_try);
    R_RegisterCCallable("shmemr", "_shmemr_get_mem_length", (DL_FUNC)_shmemr_get_mem_length_try);
    R_RegisterCCallable("shmemr", "_shmemr_get_mem_id", (DL_FUNC)_shmemr_get_mem_id_try);
    R_RegisterCCallable("shmemr", "_shmemr_mem_remove", (DL_FUNC)_shmemr_mem_remove_try);
    R_RegisterCCallable("shmemr", "_shmemr_mem_resize", (DL_FUNC)_shmemr_mem_resize_try);
    R_RegisterCCallable("shmemr", "_shmemr_RcppExport_validate", (DL_FUNC)_shmemr_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_shmemr_mem_types", (DL_FUNC) &_shmemr_mem_types, 0},
    {"_shmemr_mem_init", (DL_FUNC) &_shmemr_mem_init, 3},
    {"_shmemr_mem_release", (DL_FUNC) &_shmemr_mem_release, 1},
    {"_shmemr_mem_attach", (DL_FUNC) &_shmemr_mem_attach, 1},
    {"_shmemr_mem_detach", (DL_FUNC) &_shmemr_mem_detach, 1},
    {"_shmemr_is_mem_attached", (DL_FUNC) &_shmemr_is_mem_attached, 1},
    {"_shmemr_get_mem_ptr", (DL_FUNC) &_shmemr_get_mem_ptr, 1},
    {"_shmemr_get_mem_str", (DL_FUNC) &_shmemr_get_mem_str, 1},
    {"_shmemr_get_mem_length", (DL_FUNC) &_shmemr_get_mem_length, 1},
    {"_shmemr_get_mem_id", (DL_FUNC) &_shmemr_get_mem_id, 1},
    {"_shmemr_mem_remove", (DL_FUNC) &_shmemr_mem_remove, 1},
    {"_shmemr_mem_resize", (DL_FUNC) &_shmemr_mem_resize, 2},
    {"_shmemr_RcppExport_registerCCallable", (DL_FUNC) &_shmemr_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_shmemr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
