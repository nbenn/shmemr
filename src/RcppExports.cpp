// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// mem_init
SEXP mem_init(std::string name, double length, std::string type);
RcppExport SEXP _shmemr_mem_init(SEXP nameSEXP, SEXP lengthSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    Rcpp::traits::input_parameter< double >::type length(lengthSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(mem_init(name, length, type));
    return rcpp_result_gen;
END_RCPP
}
// mem_attach
void mem_attach(SEXP x);
RcppExport SEXP _shmemr_mem_attach(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    mem_attach(x);
    return R_NilValue;
END_RCPP
}
// mem_detach
void mem_detach(SEXP x);
RcppExport SEXP _shmemr_mem_detach(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    mem_detach(x);
    return R_NilValue;
END_RCPP
}
// is_mem_attached
bool is_mem_attached(SEXP x);
RcppExport SEXP _shmemr_is_mem_attached(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(is_mem_attached(x));
    return rcpp_result_gen;
END_RCPP
}
// get_mem_address
SEXP get_mem_address(SEXP x);
RcppExport SEXP _shmemr_get_mem_address(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(get_mem_address(x));
    return rcpp_result_gen;
END_RCPP
}
// get_mem_length
double get_mem_length(SEXP x);
RcppExport SEXP _shmemr_get_mem_length(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(get_mem_length(x));
    return rcpp_result_gen;
END_RCPP
}
// get_mem_id
std::string get_mem_id(SEXP x);
RcppExport SEXP _shmemr_get_mem_id(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(get_mem_id(x));
    return rcpp_result_gen;
END_RCPP
}
// mem_remove
void mem_remove(SEXP x);
RcppExport SEXP _shmemr_mem_remove(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    mem_remove(x);
    return R_NilValue;
END_RCPP
}
// mem_resize
void mem_resize(SEXP x, double new_length);
RcppExport SEXP _shmemr_mem_resize(SEXP xSEXP, SEXP new_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type new_length(new_lengthSEXP);
    mem_resize(x, new_length);
    return R_NilValue;
END_RCPP
}
// mem_addr_str
std::string mem_addr_str(SEXP x);
RcppExport SEXP _shmemr_mem_addr_str(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(mem_addr_str(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_shmemr_mem_init", (DL_FUNC) &_shmemr_mem_init, 3},
    {"_shmemr_mem_attach", (DL_FUNC) &_shmemr_mem_attach, 1},
    {"_shmemr_mem_detach", (DL_FUNC) &_shmemr_mem_detach, 1},
    {"_shmemr_is_mem_attached", (DL_FUNC) &_shmemr_is_mem_attached, 1},
    {"_shmemr_get_mem_address", (DL_FUNC) &_shmemr_get_mem_address, 1},
    {"_shmemr_get_mem_length", (DL_FUNC) &_shmemr_get_mem_length, 1},
    {"_shmemr_get_mem_id", (DL_FUNC) &_shmemr_get_mem_id, 1},
    {"_shmemr_mem_remove", (DL_FUNC) &_shmemr_mem_remove, 1},
    {"_shmemr_mem_resize", (DL_FUNC) &_shmemr_mem_resize, 2},
    {"_shmemr_mem_addr_str", (DL_FUNC) &_shmemr_mem_addr_str, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_shmemr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
